// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.39.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/payload.dart';
import 'api/simple.dart';
import 'api/value.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.39';

  @override
  int get rustContentHash => -75015201;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<DartPayload>> crateApiSimpleExecute({required String sql});

  Future<void> crateApiSimpleInitApp();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataType;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DataTypePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Decimal;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Decimal;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DecimalPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Error;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Error;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ErrorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Interval;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Interval;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IntervalPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_IpAddr;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_IpAddr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IpAddrPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NaiveDate;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NaiveDate;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NaiveDatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NaiveTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NaiveTime;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NaiveTimePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayloadVariable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayloadVariable;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayloadVariablePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Point;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Point;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PointPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ValuePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<DartPayload>> crateApiSimpleExecute({required String sql}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(sql, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_dart_payload,
        decodeErrorData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError,
      ),
      constMeta: kCrateApiSimpleExecuteConstMeta,
      argValues: [sql],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleExecuteConstMeta => const TaskConstMeta(
        debugName: "execute",
        argNames: ["sql"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DataType => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DataType => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Decimal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Decimal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Error =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Error =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Interval => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Interval => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_IpAddr => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_IpAddr => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NaiveDate => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NaiveDate => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NaiveTime => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NaiveTime => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayloadVariable => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayloadVariable => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Point =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Point =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Value =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Value =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue;

  @protected
  DataType
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Decimal
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DecimalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Error
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Interval
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IntervalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IpAddr
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IpAddrImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NaiveDate
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NaiveDateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NaiveTime
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NaiveTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PayloadVariable
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayloadVariableImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Point
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Naive(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  BigInt dco_decode_I128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  Map<String, Value>
      dco_decode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
        dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
                raw)
            .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, DartValue> dco_decode_Map_String_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_dart_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  DataType
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DataTypeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Decimal
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DecimalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Error
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Interval
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IntervalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  IpAddr
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IpAddrImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NaiveDate
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NaiveDateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NaiveTime
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NaiveTimeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PayloadVariable
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayloadVariableImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Point
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PointImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Value
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ValueImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  DartPayload dco_decode_dart_payload(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartPayload_ShowColumns(
          dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
              raw[1]),
        );
      case 1:
        return DartPayload_Create();
      case 2:
        return DartPayload_Insert(
          dco_decode_usize(raw[1]),
        );
      case 3:
        return DartPayload_Select(
          labels: dco_decode_list_String(raw[1]),
          rows: dco_decode_list_list_dart_value(raw[2]),
        );
      case 4:
        return DartPayload_SelectMap(
          dco_decode_list_Map_String_dart_value(raw[1]),
        );
      case 5:
        return DartPayload_Delete(
          dco_decode_usize(raw[1]),
        );
      case 6:
        return DartPayload_Update(
          dco_decode_usize(raw[1]),
        );
      case 7:
        return DartPayload_DropTable();
      case 8:
        return DartPayload_DropFunction();
      case 9:
        return DartPayload_AlterTable();
      case 10:
        return DartPayload_CreateIndex();
      case 11:
        return DartPayload_DropIndex();
      case 12:
        return DartPayload_StartTransaction();
      case 13:
        return DartPayload_Commit();
      case 14:
        return DartPayload_Rollback();
      case 15:
        return DartPayload_ShowVariable(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
              raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DartValue dco_decode_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DartValue_Bool(
          dco_decode_bool(raw[1]),
        );
      case 1:
        return DartValue_I8(
          dco_decode_i_8(raw[1]),
        );
      case 2:
        return DartValue_I16(
          dco_decode_i_16(raw[1]),
        );
      case 3:
        return DartValue_I32(
          dco_decode_i_32(raw[1]),
        );
      case 4:
        return DartValue_I64(
          dco_decode_i_64(raw[1]),
        );
      case 5:
        return DartValue_I128(
          dco_decode_I128(raw[1]),
        );
      case 6:
        return DartValue_U8(
          dco_decode_u_8(raw[1]),
        );
      case 7:
        return DartValue_U16(
          dco_decode_u_16(raw[1]),
        );
      case 8:
        return DartValue_U32(
          dco_decode_u_32(raw[1]),
        );
      case 9:
        return DartValue_U64(
          dco_decode_u_64(raw[1]),
        );
      case 10:
        return DartValue_U128(
          dco_decode_U128(raw[1]),
        );
      case 11:
        return DartValue_F32(
          dco_decode_f_32(raw[1]),
        );
      case 12:
        return DartValue_F64(
          dco_decode_f_64(raw[1]),
        );
      case 13:
        return DartValue_Decimal(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
              raw[1]),
        );
      case 14:
        return DartValue_Str(
          dco_decode_String(raw[1]),
        );
      case 15:
        return DartValue_Bytea(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 16:
        return DartValue_Inet(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
              raw[1]),
        );
      case 17:
        return DartValue_Date(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
              raw[1]),
        );
      case 18:
        return DartValue_Timestamp(
          dco_decode_Chrono_Naive(raw[1]),
        );
      case 19:
        return DartValue_Time(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
              raw[1]),
        );
      case 20:
        return DartValue_Interval(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
              raw[1]),
        );
      case 21:
        return DartValue_Uuid(
          dco_decode_U128(raw[1]),
        );
      case 22:
        return DartValue_Map(
          dco_decode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              raw[1]),
        );
      case 23:
        return DartValue_List(
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              raw[1]),
        );
      case 24:
        return DartValue_Point(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
              raw[1]),
        );
      case 25:
        return DartValue_NullData();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Value>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue)
        .toList();
  }

  @protected
  List<Map<String, DartValue>> dco_decode_list_Map_String_dart_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_Map_String_dart_value)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<DartPayload> dco_decode_list_dart_payload(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dart_payload).toList();
  }

  @protected
  List<DartValue> dco_decode_list_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dart_value).toList();
  }

  @protected
  List<List<DartValue>> dco_decode_list_list_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_dart_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, DataType)>
      dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type)
        .toList();
  }

  @protected
  List<(String, Value)>
      dco_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value)
        .toList();
  }

  @protected
  List<(String, DartValue)> dco_decode_list_record_string_dart_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_dart_value)
        .toList();
  }

  @protected
  (
    String,
    DataType
  ) dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          arr[1]),
    );
  }

  @protected
  (
    String,
    Value
  ) dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          arr[1]),
    );
  }

  @protected
  (String, DartValue) dco_decode_record_string_dart_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_dart_value(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  DataType
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Decimal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DecimalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Error
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Interval
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IntervalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IpAddr
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IpAddrImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NaiveDate
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NaiveDateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NaiveTime
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NaiveTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayloadVariable
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayloadVariableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Point
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Naive(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return DateTime.fromMicrosecondsSinceEpoch(inner.toInt(), isUtc: true);
  }

  @protected
  BigInt sse_decode_I128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  Map<String, Value>
      sse_decode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, DartValue> sse_decode_Map_String_dart_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_dart_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  DataType
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DataTypeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Decimal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DecimalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Error
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ErrorImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Interval
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IntervalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  IpAddr
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IpAddrImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NaiveDate
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NaiveDateImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NaiveTime
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NaiveTimeImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayloadVariable
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayloadVariableImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Point
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PointImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Value
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ValueImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DartPayload sse_decode_dart_payload(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
                deserializer);
        return DartPayload_ShowColumns(var_field0);
      case 1:
        return DartPayload_Create();
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        return DartPayload_Insert(var_field0);
      case 3:
        var var_labels = sse_decode_list_String(deserializer);
        var var_rows = sse_decode_list_list_dart_value(deserializer);
        return DartPayload_Select(labels: var_labels, rows: var_rows);
      case 4:
        var var_field0 = sse_decode_list_Map_String_dart_value(deserializer);
        return DartPayload_SelectMap(var_field0);
      case 5:
        var var_field0 = sse_decode_usize(deserializer);
        return DartPayload_Delete(var_field0);
      case 6:
        var var_field0 = sse_decode_usize(deserializer);
        return DartPayload_Update(var_field0);
      case 7:
        return DartPayload_DropTable();
      case 8:
        return DartPayload_DropFunction();
      case 9:
        return DartPayload_AlterTable();
      case 10:
        return DartPayload_CreateIndex();
      case 11:
        return DartPayload_DropIndex();
      case 12:
        return DartPayload_StartTransaction();
      case 13:
        return DartPayload_Commit();
      case 14:
        return DartPayload_Rollback();
      case 15:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
                deserializer);
        return DartPayload_ShowVariable(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DartValue sse_decode_dart_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return DartValue_Bool(var_field0);
      case 1:
        var var_field0 = sse_decode_i_8(deserializer);
        return DartValue_I8(var_field0);
      case 2:
        var var_field0 = sse_decode_i_16(deserializer);
        return DartValue_I16(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return DartValue_I32(var_field0);
      case 4:
        var var_field0 = sse_decode_i_64(deserializer);
        return DartValue_I64(var_field0);
      case 5:
        var var_field0 = sse_decode_I128(deserializer);
        return DartValue_I128(var_field0);
      case 6:
        var var_field0 = sse_decode_u_8(deserializer);
        return DartValue_U8(var_field0);
      case 7:
        var var_field0 = sse_decode_u_16(deserializer);
        return DartValue_U16(var_field0);
      case 8:
        var var_field0 = sse_decode_u_32(deserializer);
        return DartValue_U32(var_field0);
      case 9:
        var var_field0 = sse_decode_u_64(deserializer);
        return DartValue_U64(var_field0);
      case 10:
        var var_field0 = sse_decode_U128(deserializer);
        return DartValue_U128(var_field0);
      case 11:
        var var_field0 = sse_decode_f_32(deserializer);
        return DartValue_F32(var_field0);
      case 12:
        var var_field0 = sse_decode_f_64(deserializer);
        return DartValue_F64(var_field0);
      case 13:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
                deserializer);
        return DartValue_Decimal(var_field0);
      case 14:
        var var_field0 = sse_decode_String(deserializer);
        return DartValue_Str(var_field0);
      case 15:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return DartValue_Bytea(var_field0);
      case 16:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
                deserializer);
        return DartValue_Inet(var_field0);
      case 17:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
                deserializer);
        return DartValue_Date(var_field0);
      case 18:
        var var_field0 = sse_decode_Chrono_Naive(deserializer);
        return DartValue_Timestamp(var_field0);
      case 19:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
                deserializer);
        return DartValue_Time(var_field0);
      case 20:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
                deserializer);
        return DartValue_Interval(var_field0);
      case 21:
        var var_field0 = sse_decode_U128(deserializer);
        return DartValue_Uuid(var_field0);
      case 22:
        var var_field0 =
            sse_decode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
                deserializer);
        return DartValue_Map(var_field0);
      case 23:
        var var_field0 =
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
                deserializer);
        return DartValue_List(var_field0);
      case 24:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
                deserializer);
        return DartValue_Point(var_field0);
      case 25:
        return DartValue_NullData();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  List<Value>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Value>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<Map<String, DartValue>> sse_decode_list_Map_String_dart_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Map<String, DartValue>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Map_String_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartPayload> sse_decode_list_dart_payload(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartPayload>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_payload(deserializer));
    }
    return ans_;
  }

  @protected
  List<DartValue> sse_decode_list_dart_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DartValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<DartValue>> sse_decode_list_list_dart_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<DartValue>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, DataType)>
      sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, DataType)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, Value)>
      sse_decode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Value)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, DartValue)> sse_decode_list_record_string_dart_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, DartValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_dart_value(deserializer));
    }
    return ans_;
  }

  @protected
  (
    String,
    DataType
  ) sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (
    String,
    Value
  ) sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, DartValue) sse_decode_record_string_dart_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_dart_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          DataType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataTypeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          Decimal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DecimalImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ErrorImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          Interval self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IntervalImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          IpAddr self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IpAddrImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          NaiveDate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NaiveDateImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          NaiveTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NaiveTimeImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          PayloadVariable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PayloadVariableImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          Point self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PointImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Chrono_Naive(DateTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(
        PlatformInt64Util.from(self.microsecondsSinceEpoch), serializer);
  }

  @protected
  void sse_encode_I128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void
      sse_encode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Map<String, Value> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_dart_value(
      Map<String, DartValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_dart_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
          DataType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DataTypeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
          Decimal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DecimalImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerError(
          Error self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ErrorImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
          Interval self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IntervalImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
          IpAddr self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IpAddrImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
          NaiveDate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NaiveDateImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
          NaiveTime self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as NaiveTimeImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
          PayloadVariable self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PayloadVariableImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
          Point self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PointImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          Value self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ValueImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_dart_payload(DartPayload self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartPayload_ShowColumns(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
            field0, serializer);
      case DartPayload_Create():
        sse_encode_i_32(1, serializer);
      case DartPayload_Insert(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
      case DartPayload_Select(labels: final labels, rows: final rows):
        sse_encode_i_32(3, serializer);
        sse_encode_list_String(labels, serializer);
        sse_encode_list_list_dart_value(rows, serializer);
      case DartPayload_SelectMap(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_Map_String_dart_value(field0, serializer);
      case DartPayload_Delete(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_usize(field0, serializer);
      case DartPayload_Update(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_usize(field0, serializer);
      case DartPayload_DropTable():
        sse_encode_i_32(7, serializer);
      case DartPayload_DropFunction():
        sse_encode_i_32(8, serializer);
      case DartPayload_AlterTable():
        sse_encode_i_32(9, serializer);
      case DartPayload_CreateIndex():
        sse_encode_i_32(10, serializer);
      case DartPayload_DropIndex():
        sse_encode_i_32(11, serializer);
      case DartPayload_StartTransaction():
        sse_encode_i_32(12, serializer);
      case DartPayload_Commit():
        sse_encode_i_32(13, serializer);
      case DartPayload_Rollback():
        sse_encode_i_32(14, serializer);
      case DartPayload_ShowVariable(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPayloadVariable(
            field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_dart_value(DartValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DartValue_Bool(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
      case DartValue_I8(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_i_8(field0, serializer);
      case DartValue_I16(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_i_16(field0, serializer);
      case DartValue_I32(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
      case DartValue_I64(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_i_64(field0, serializer);
      case DartValue_I128(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_I128(field0, serializer);
      case DartValue_U8(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_u_8(field0, serializer);
      case DartValue_U16(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_u_16(field0, serializer);
      case DartValue_U32(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_u_32(field0, serializer);
      case DartValue_U64(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_u_64(field0, serializer);
      case DartValue_U128(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_U128(field0, serializer);
      case DartValue_F32(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_f_32(field0, serializer);
      case DartValue_F64(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_f_64(field0, serializer);
      case DartValue_Decimal(field0: final field0):
        sse_encode_i_32(13, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDecimal(
            field0, serializer);
      case DartValue_Str(field0: final field0):
        sse_encode_i_32(14, serializer);
        sse_encode_String(field0, serializer);
      case DartValue_Bytea(field0: final field0):
        sse_encode_i_32(15, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case DartValue_Inet(field0: final field0):
        sse_encode_i_32(16, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIpAddr(
            field0, serializer);
      case DartValue_Date(field0: final field0):
        sse_encode_i_32(17, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveDate(
            field0, serializer);
      case DartValue_Timestamp(field0: final field0):
        sse_encode_i_32(18, serializer);
        sse_encode_Chrono_Naive(field0, serializer);
      case DartValue_Time(field0: final field0):
        sse_encode_i_32(19, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNaiveTime(
            field0, serializer);
      case DartValue_Interval(field0: final field0):
        sse_encode_i_32(20, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInterval(
            field0, serializer);
      case DartValue_Uuid(field0: final field0):
        sse_encode_i_32(21, serializer);
        sse_encode_U128(field0, serializer);
      case DartValue_Map(field0: final field0):
        sse_encode_i_32(22, serializer);
        sse_encode_Map_String_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            field0, serializer);
      case DartValue_List(field0: final field0):
        sse_encode_i_32(23, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
            field0, serializer);
      case DartValue_Point(field0: final field0):
        sse_encode_i_32(24, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPoint(
            field0, serializer);
      case DartValue_NullData():
        sse_encode_i_32(25, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          List<Value> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_Map_String_dart_value(
      List<Map<String, DartValue>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Map_String_dart_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_payload(
      List<DartPayload> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_payload(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dart_value(
      List<DartValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dart_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_dart_value(
      List<List<DartValue>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_dart_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
          List<(String, DataType)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          List<(String, Value)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_dart_value(
      List<(String, DartValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_dart_value(item, serializer);
    }
  }

  @protected
  void
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_data_type(
          (String, DataType) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDataType(
        self.$2, serializer);
  }

  @protected
  void
      sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_value(
          (String, Value) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerValue(
        self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_dart_value(
      (String, DartValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_dart_value(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class DataTypeImpl extends RustOpaque implements DataType {
  // Not to be used by end users
  DataTypeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DataTypeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DataType,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DataType,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DataTypePtr,
  );
}

@sealed
class DecimalImpl extends RustOpaque implements Decimal {
  // Not to be used by end users
  DecimalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DecimalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Decimal,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Decimal,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DecimalPtr,
  );
}

@sealed
class ErrorImpl extends RustOpaque implements Error {
  // Not to be used by end users
  ErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Error,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Error,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ErrorPtr,
  );
}

@sealed
class IntervalImpl extends RustOpaque implements Interval {
  // Not to be used by end users
  IntervalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IntervalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Interval,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Interval,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IntervalPtr,
  );
}

@sealed
class IpAddrImpl extends RustOpaque implements IpAddr {
  // Not to be used by end users
  IpAddrImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IpAddrImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_IpAddr,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_IpAddr,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IpAddrPtr,
  );
}

@sealed
class NaiveDateImpl extends RustOpaque implements NaiveDate {
  // Not to be used by end users
  NaiveDateImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NaiveDateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NaiveDate,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NaiveDate,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NaiveDatePtr,
  );
}

@sealed
class NaiveTimeImpl extends RustOpaque implements NaiveTime {
  // Not to be used by end users
  NaiveTimeImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NaiveTimeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NaiveTime,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NaiveTime,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NaiveTimePtr,
  );
}

@sealed
class PayloadVariableImpl extends RustOpaque implements PayloadVariable {
  // Not to be used by end users
  PayloadVariableImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PayloadVariableImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PayloadVariable,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PayloadVariable,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PayloadVariablePtr,
  );
}

@sealed
class PointImpl extends RustOpaque implements Point {
  // Not to be used by end users
  PointImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PointImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Point,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Point,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PointPtr,
  );
}

@sealed
class ValueImpl extends RustOpaque implements Value {
  // Not to be used by end users
  ValueImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ValueImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Value,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Value,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ValuePtr,
  );
}
