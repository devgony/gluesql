// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.40.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `Array`, `Variable`
// These functions are ignored (category: IgnoreBecauseNotAllowedOwner): `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql_unquoted`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`, `to_sql`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Assignment>>
abstract class Assignment implements RustOpaqueInterface, ToSql {
  String get id;

  Expr get value;

  void set id(String id);

  void set value(Expr value);

  Future<String> toSql();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Statement>>
abstract class Statement implements RustOpaqueInterface, ToSql {
  Future<String> toSql();
}

abstract class ToSql {
  Future<String> toSql();
}

abstract class ToSqlUnquoted {
  Future<String> toSqlUnquoted();
}

class ForeignKey {
  final String name;
  final String referencingColumnName;
  final String referencedTableName;
  final String referencedColumnName;
  final ReferentialAction onDelete;
  final ReferentialAction onUpdate;

  const ForeignKey({
    required this.name,
    required this.referencingColumnName,
    required this.referencedTableName,
    required this.referencedColumnName,
    required this.onDelete,
    required this.onUpdate,
  });

  Future<String> toSql() => RustLib.instance.api.gluesqlCoreAstForeignKeyToSql(
        that: this,
      );

  @override
  int get hashCode =>
      name.hashCode ^
      referencingColumnName.hashCode ^
      referencedTableName.hashCode ^
      referencedColumnName.hashCode ^
      onDelete.hashCode ^
      onUpdate.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ForeignKey &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          referencingColumnName == other.referencingColumnName &&
          referencedTableName == other.referencedTableName &&
          referencedColumnName == other.referencedColumnName &&
          onDelete == other.onDelete &&
          onUpdate == other.onUpdate;
}

enum ReferentialAction {
  noAction,
  ;
}
